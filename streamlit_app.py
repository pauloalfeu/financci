import streamlit as st
import numpy as np
import pandas as pd

with st.sidebar:
    st.title("Instru√ß√µes")
    st.write("Abaixo apresentamos um guia r√°pido sobre como usar o aplicativo.")

    # Adicione aqui o seu tutorial completo, utilizando markdown
    st.markdown("""
    **Passo a passo:**

    1. **Carregar o arquivo:** Clique no bot√£o "Browse files" e selecione um ou mais arquivos .txt de rendimentos do seu computador.
    2. **Selecionar as colunas:** Clique na caixa de sele√ß√£o (no nome das colunas) para escolher ordenar os dados da maneira que deseja analisar.
    3. **Visualizar os resultados:** As tabelas e os somat√≥rios ser√£o exibidos abaixo, separados por conta banc√°ria.
    4. **Fa√ßa o download das tabelas:** Se desejar, √© poss√≠vel baixar as tabelas individualmente. Para isso, passe o cursor do mouse sobre a tabela desejada e clique no √≠cone de download.
    
    """)
    st.sidebar.warning("""
    **Aviso:** Os dados que voc√™ enviar ser√£o utilizados apenas para a execu√ß√£o deste aplicativo e **n√£o ser√£o salvos** em nossa base de dados. 
    Sua privacidade √© importante para n√≥s.
    """)


st.markdown("""
## üéØ Bem-vindo ao seu Gerenciador de Rendimentos!

Este aplicativo te ajudar√° a analisar os seus rendimentos banc√°rios de forma r√°pida e eficiente.

**Observa√ß√µes:**

* **Formato do arquivo:** O formato do arquivo √© crucial para o correto funcionamento do aplicativo. Por favor, verifique se o seu arquivo est√° no formato especificado _(.txt)_.
* **Erro comum:** Grande parte das mensagens de erro podem indicar que o arquivo enviado n√£o possui dados para leitura, por n√£o haver rendimentos no per√≠odo indicado (tente verificar no aplicativo banc√°rio se realmente houve rendimento).

""")

st.info("**Problema com o arquivo?** Se voc√™ ver uma mensagem de erro, √© prov√°vel que o arquivo tenha um formato inesperado. Clique no **'X'** para remov√™-lo e tente novamente.")

st.markdown("""
**D√∫vidas extras?** Entre em contato com o desenvolvedor.
---""")
#st.divider()






#uploaded_file = st.file_uploader("Add text file !")
# Permite o upload de m√∫ltiplos arquivos
uploaded_files = st.file_uploader("", accept_multiple_files=True)

# Lista para armazenar os DataFrames
all_dfs = []

# Processando os arquivos
if uploaded_files is not None:
#    try:
        for uploaded_file in uploaded_files:
            try:
                linhas_limpas = []
                for line in uploaded_file:
                    texto = line.decode('latin-1')
                    # Remove caracteres especiais (ajuste conforme necess√°rio)
                    texto = texto.strip()
                    linhas_limpas.append(texto)
                    
                palavras = []
                for line in linhas_limpas:
                    line = line.strip()

                    # Dividindo a linha em partes usando espa√ßos como delimitador
                    partes = line.split()
                    palavras.append(partes)

                df = pd.DataFrame(palavras)

                # Iterando sobre as linhas do DataFrame
                dados = []

                encontrado = False
                for index, row in df.iterrows():
                    if 'Conta:' in row.values:
                        # Encontrou a linha com "Conta:"
                        numero_conta = row.iloc[row.values.tolist().index('Conta:') + 1]
                        dados.append(numero_conta)
                        encontrado = True
                        break  # Para o loop ap√≥s encontrar a primeira ocorr√™ncia
                if not encontrado:
                    st.error("'Conta' n√£o foi encontrada no ", uploaded_file.name)
                for index, row in df.iterrows():
                    if 'M√™s/ano' in row.values:
                        # Encontrou a linha com "Conta:"
                        mes_ano = row.iloc[row.values.tolist().index('M√™s/ano') + 2]
                        dados.append(mes_ano)
                        encontrado = True
                        break  # Para o loop ap√≥s encontrar a primeira ocorr√™ncia
                if not encontrado:
                    st.error("'M√™s/ano' n√£o foi encontrado no ", uploaded_file.name)
                for index, row in df.iterrows():
                    if 'L√çQUIDO' in row.values:
                        # Encontrou a linha com "Conta:"
                        rendimento = row.iloc[row.values.tolist().index('L√çQUIDO') + 1]
                        dados.append(rendimento)
                        encontrado = True
                        break  # Para o loop ap√≥s encontrar a primeira ocorr√™ncia
                if not encontrado:
                    st.error("'Rendimento' n√£o foi encontrado no ", uploaded_file.name)



                df = pd.DataFrame(columns=['CONTA', 'M√™s/ano refer√™ncia', 'RENDIMENTO L√çQUIDO'])
                # Adicionando os dados da imagem ao DataFrame
                for i, valor in enumerate(dados):
                    df.loc[0, df.columns[i]] = valor
                
                # Create 'mes' and 'ano' columns by splitting 'M√™s/ano refer√™ncia'
                df[['M√äS', 'ANO']] = df['M√™s/ano refer√™ncia'].str.split('/', expand=True)

                # Remove 'M√™s/ano refer√™ncia' column
                df = df.drop('M√™s/ano refer√™ncia', axis=1)


                #st.data_editor(df)
                # Adicionar o DataFrame √† lista com todos
                all_dfs.append(df)
            except Exception as e:
                st.error(f"Ocorreu um erro inesperado com o arquivo: \"{uploaded_file.name}\" presente nos arquivos enviados. Por favor, verifique-o e tente novamente.")

        # Concatenar todos os DataFrames, se houver pelo menos um
        if all_dfs:
            try:
                df_final = pd.concat(all_dfs, ignore_index=True)
                contas_unicas = df_final['CONTA'].unique()
                #st.write(df_final)

                # Convertendo a coluna 'RENDIMENTO L√çQUIDO' para float
                def limpar_e_converter(valor):
                    valor_str = str(valor)
                    # Remove todos os pontos, exceto o √∫ltimo
                    valor_str = valor_str.rstrip('.')  # Remove pontos no final
                    valor_str = valor_str.replace('.', '', valor_str.count('.') - 1)
                    # Substitui a v√≠rgula por ponto
                    valor_str = valor_str.replace(',', '.')
                    # Remove espa√ßos em branco
                    valor_str = valor_str.strip()
                    try:
                        return float(valor_str)
                    except ValueError:
                        print(f"Erro ao converter {valor} para float.")
                        return np.nan

                df_final['RENDIMENTO L√çQUIDO'] = df_final['RENDIMENTO L√çQUIDO'].apply(limpar_e_converter)

                for conta in contas_unicas:
                    # Filtrar o DataFrame para a conta atual
                    df_conta = df_final[df_final['CONTA'] == conta]

                    # Calcular o total de rendimentos l√≠quidos para a conta
                    total_rendimento = df_conta['RENDIMENTO L√çQUIDO'].sum()

                    # Exibir os resultados no Streamlit
                    st.divider()
                    st.write("Dados da conta " + conta)
                    st.markdown("**Total de Rendimentos L√≠quidos: R$" + str(total_rendimento) + "**")
                    st.dataframe(df_conta)
            except Exception as e:
                st.error(f"Ocorreu um erro ao concatenar os DataFrames: {e}")
        else:
            st.info("Selecione os arquivos que deseja processar clicando no bot√£o \"Browse files\" acima.")
#    except Exception as e:
#        st.error("Ocorreu um erro inesperado com um dos arquivos enviados. Por favor, tente novamente.")
